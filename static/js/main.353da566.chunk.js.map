{"version":3,"sources":["logo.svg","Component/SCORETABLE.js","Component/SELECTTOPIC.js","Component/MAIN.js","App.js","reportWebVitals.js","index.js"],"names":["Table","props","f_row","myarr","map","topic","cells","i","l_row","score","msarr","pimap","get","style","backgroundColor","push","allrows","TopicList","optionList","topicarr","value","Main","state","definition","data","itmap","Map","tsmap","check","topicbool","currentindex","this","setState","axios","then","response","definitions","length","index","subTopic","has","set","manager","parameter","idx","keys","loaddata","e","val","target","enabletopic","console","log","background","class","id","name","onChange","indexClicked","disabled","topicClicked","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.353da566.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport React from 'react'; \r\n\r\n  \r\nconst Table=(props)=>\r\n{\r\n  \r\n    \r\n    let nor = 5; //number of rows\r\n    let f_row = props.myarr.map((topic)=>{// first row of the table\r\n        return(<th>{topic}</th>);\r\n    })\r\n    \r\n\r\n    function allrows(){ //return array of all the data containing row if the table \r\n\r\n         const cells =[];\r\n        for(let i=0;i<nor;i++)\r\n        {  \r\n          let l_row = props.myarr.map((topic)=>{\r\n              let score = props.msarr[props.pimap.get(topic)][i][1]\r\n              if(score<=1)\r\n              {\r\n                return(<td style= {{backgroundColor:\"#FF0000\"}}>{score}</td>)\r\n              }\r\n              else if(score<=2)\r\n              {\r\n                return(<td style= {{backgroundColor:\"#FF5B00\"}}>{score}</td>)\r\n              }\r\n              else if(score<4)\r\n              {\r\n                return(<td style= {{backgroundColor:\"#FFEB00\"}}>{score}</td>)\r\n              }\r\n              else\r\n              {\r\n                return(<td style={{backgroundColor:\"#54FF12\"}}>{score}</td>)\r\n              }  \r\n           })\r\n         \r\n           \r\n            cells.push(<tr><th>{props.msarr[0][i][0]}</th>{l_row}</tr>);\r\n           \r\n        }\r\n        return cells;\r\n\r\n    }\r\n\r\n\r\n    return(\r\n           <>\r\n           <tr>\r\n            <th>Managers</th>\r\n             {f_row}\r\n           </tr>\r\n           {allrows()}\r\n           </>\r\n);\r\n\r\n}\r\n\r\n\r\n  \r\nexport default Table;","\r\nimport React from 'react'; \r\n\r\n  \r\nconst TopicList=(props)=>\r\n{\r\n  \r\n   let optionList =  props.topicarr.map(topic =>{\r\n      \r\n        return (<option value={topic}>{topic}</option>);\r\n    })\r\n\r\n   \r\n    return(<> \r\n           {optionList}  \r\n           </>    \r\n           );\r\n\r\n}\r\n\r\n\r\n  \r\nexport default TopicList;","import React from 'react';\r\nimport '../App.css';\r\nimport axios from 'axios';\r\nimport Table from './SCORETABLE'  //this component dynamically populate the score table\r\nimport TopicList from './SELECTTOPIC' // this component dynamically populate the Topic list dropdown menu\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        definition:[], //to store definitions coming from api (index-topic-subtopic)\r\n        data:[],       //to store score-parameter data coming from API \r\n        itmap:new Map(), //index-topic mapping for example engagement =>[fit,motivation,job characteristic]\r\n        tsmap:new Map(), //topic to subtopic mapping\r\n        pimap:new Map(), //parameter to index mapping (here index corresponds to location where score of given parameter is saved in msarr\r\n        msarr:[],   // managerscore array (this is two dimensional array) saves manager name and score of one parameter in one row \r\n        myarr:[],   //used to pass data necessary to populate the manager score table\r\n        check:false,  //check whether data from api has been recieved and arranged once data is recieved it help in rerendering page to display data\r\n        topicbool:true,  //to enable and disable dropdown select menu \r\n        topicarr:[], // used to send data to dynamically populate the topic selection menu\r\n        currentindex:null //used to save the value of current selected index in case we need to use in at some place later in program\r\n    }\r\n}\r\n \r\n\r\n// when data is loaded from API call this is called to rerender the page\r\n  loaddata(){\r\n    this.setState({check:true});\r\n  }\r\n// in componentWillMount the api call is made and data is processed properly for utilising at later stage\r\n   componentWillMount(){\r\n   axios.get(\"https://run.mocky.io/v3/09a1870d-294b-4d53-ac4f-87b676ddd000\")\r\n   .then(response =>{\r\n     this.setState({definition:response.data.definitions,data:response.data.data});\r\n    \r\n     \r\n     // this for loop process data for index-topic map, topic-subtopic map\r\n     for(let i= 0;i<this.state.definition.length;i++)\r\n     {\r\n        let index = this.state.definition[i].index;\r\n        let topic = this.state.definition[i].topic;\r\n        let subTopic = this.state.definition[i].subTopic;\r\n        if(this.state.itmap.has(index))\r\n        {\r\n            this.state.itmap.set(index,[...this.state.itmap.get(index),topic]);\r\n           if(this.state.tsmap.has(topic))\r\n           {\r\n            this.state.tsmap.set(topic,[...this.state.tsmap.get[topic],subTopic]);\r\n           }\r\n           else\r\n           {\r\n            this.state.tsmap.set(topic,[subTopic]);\r\n           }\r\n        }\r\n        else\r\n        {\r\n            this.state.itmap.set(index,[topic]);\r\n            this.state.tsmap.set(topic,[subTopic]);\r\n        }\r\n    }\r\n    \r\n    //this for loop processes data for parameter-index map and manager-score array \r\n    for(let i = 0;i<this.state.data.length;i++)\r\n    {\r\n     let manager = this.state.data[i].manager;\r\n     let parameter = this.state.data[i].parameter;\r\n     let score = this.state.data[i].score;\r\n\r\n     if(this.state.pimap.has(parameter))\r\n     {\r\n        let idx = this.state.pimap.get(parameter);\r\n        this.state.msarr[idx][this.state.msarr[idx].length]= [manager,score];\r\n     }\r\n     else\r\n     {\r\n        this.state.pimap.set(parameter,this.state.msarr.length);\r\n        this.state.msarr[this.state.msarr.length] = [];\r\n        this.state.msarr[this.state.msarr.length-1][0] = [manager,score];\r\n     }\r\n    }\r\n     \r\n    //this make myarr ready for making call for default table in case no index and topic have been selected\r\n     this.state.myarr = [...this.state.itmap.keys()];\r\n     this.loaddata();\r\n   })\r\n  }\r\n\r\n  //this help in enabling the topic selection dropdown menu\r\n  enabletopic(){\r\n    this.setState({topicbool:false});\r\n  }\r\n\r\n  //this is called when any changes is made in index selction dropdown menu\r\n  indexClicked(e){\r\n    let val = e.target.value;\r\n\r\n    if(val ===\"\")\r\n    {\r\n      this.setState({myarr:[...this.state.itmap.keys()],topicbool:true});\r\n    }\r\n    else\r\n    { \r\n    this.state.currentindex = val;\r\n    this.setState({myarr:this.state.itmap.get(val),topicarr:this.state.itmap.get(val)},this.enabletopic);\r\n    }\r\n\r\n  }\r\n\r\n  //this is called when any changes is made in topic selection dropdown menu\r\n  topicClicked(e){\r\n      let val = e.target.value;\r\n      console.log(e.target.value);\r\n    if(val !== \"\")\r\n    {    \r\n      console.log(this.state.tsmap);\r\n      this.setState({myarr:this.state.tsmap.get(val)});\r\n    }\r\n    else\r\n    {\r\n      this.setState({myarr:this.state.itmap.get(this.state.currentindex)});\r\n    }\r\n    \r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n render(){\r\n     //until data does not arrive from server it returns empty div\r\n     if(!this.state.check)\r\n     {\r\n         return <div/>\r\n     }\r\n\r\n\r\n  return (\r\n    <div background =\"#010101\" class=\"topdiv\">\r\n     <form>\r\n         <select id =\"indexSelector\" name =\"index\" onChange={(e)=> this.indexClicked(e)}>\r\n             <option value =\"\">Select an Index</option>\r\n             <option value = \"Engagement\">Engagement</option>\r\n             <option value = \"Manager Satisfaction\">Manager Satisfaction</option>\r\n             <option value = \"Job Satisfaction\">Job Satisfaction</option>\r\n         </select>\r\n        \r\n        {this.state.topicbool?\r\n        (<select id=\"topicSelector\" name =\"topic\" disabled>\r\n        <option value =\"\">Select an Topic</option>\r\n        </select>)\r\n        \r\n        :(<select id=\"topicSelector\" name =\"topic\" onChange ={(e)=>this.topicClicked(e)}>\r\n           <option value =\"\">Select an Topic</option>\r\n         <TopicList topicarr = {this.state.topicarr}/> \r\n        </select> )} \r\n            \r\n     </form>\r\n     \r\n     <br/><br/>\r\n     \r\n     <table id=\"scoretable\">\r\n        <Table myarr= {this.state.myarr} msarr ={this.state.msarr} pimap = {this.state.pimap}/>\r\n     </table>\r\n    </div>\r\n  )\r\n  }\r\n }","import logo from './logo.svg';\nimport './App.css';\nimport Main from './Component/MAIN'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">  \n    <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}